<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="32" tokens="109">
      <file begintoken="5332" column="18" endcolumn="46" endline="95" endtoken="5440"
            line="64"
            path="/home/xico2001pt/Desktop/TVVS/exercises/recitation-1-jpacman/jpacman/src/main/java/nl/tudelft/jpacman/npc/ghost/Blinky.java"/>
      <file begintoken="5563" column="17" endcolumn="46" endline="105" endtoken="5671"
            line="77"
            path="/home/xico2001pt/Desktop/TVVS/exercises/recitation-1-jpacman/jpacman/src/main/java/nl/tudelft/jpacman/npc/ghost/Clyde.java"/>
      <codefragment><![CDATA[    public Blinky(Map<Direction, Sprite> spriteMap) {
        super(spriteMap, MOVE_INTERVAL, INTERVAL_VARIATION);
    }

    /**
     * {@inheritDoc}
     *
     * <p>
     * When the ghosts are not patrolling in their home corners (Blinky:
     * top-right, Pinky: top-left, Inky: bottom-right, Clyde: bottom-left),
     * Blinky will attempt to shorten the distance between Pac-Man and himself.
     * If he has to choose between shortening the horizontal or vertical
     * distance, he will choose to shorten whichever is greatest. For example,
     * if Pac-Man is four grid spaces to the left, and seven grid spaces above
     * Blinky, he'll try to move up towards Pac-Man before he moves to the left.
     * </p>
     */
    @Override
    public Optional<Direction> nextAiMove() {
        assert hasSquare();

        // TODO Blinky should patrol his corner every once in a while
        // TODO Implement his actual behaviour instead of simply chasing.
        Unit nearest = Navigation.findNearest(Player.class, getSquare());
        if (nearest == null) {
            return Optional.empty();
        }
        assert nearest.hasSquare();
        Square target = nearest.getSquare();

        List<Direction> path = Navigation.shortestPath(getSquare(), target, this);
        if (path != null && !path.isEmpty()) {]]></codefragment>
   </duplication>
</pmd-cpd>